
//power of unsigned int
unsigned int myPow(unsigned int x, unsigned int p)
{
  if (p == 0) return 1;
  if (p == 1) return x;

  int tmp = myPow(x, p/2);
  if (p%2 == 0) return tmp * tmp;
  else return x * tmp * tmp;
}

//Graph/Hashtable to find center vertex
class Solution {
public:
    int findCenter(vector<vector<int>>& edges) {

			//Graph/Hashtable, speed53%, memory22%
            unordered_map<int, int> degree;
            
            for(const auto & e:edges)
            {
                ++degree[e[0]];
                ++degree[e[1]];
            }
            
            const int n = degree.size();
            for(const auto &[id,d]:degree)
            {
                if(d==n-1)
                {
                    return id;
                }
            }
            return -1;
    }
};

//floodfill
private:
	void floodFill_API(vector<vector<int>>& image, int sr, int sc, int max_row, int max_colum, int originColor, int newColor)
	{
		if((sr<0) || (sc<0) || (sr>=max_row) || (sc>=max_colum))
		{
			return;
		}
		if (originColor == image[sr][sc])
		{
			image[sr][sc] = newColor;
			floodFill_API(image, sr+1, sc, max_row, max_colum, originColor, newColor);
			floodFill_API(image, sr, sc+1, max_row, max_colum, originColor, newColor);
			floodFill_API(image, sr-1, sc, max_row, max_colum, originColor, newColor);
			floodFill_API(image, sr, sc-1, max_row, max_colum, originColor, newColor);
		}
	}

//slide window
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        set<char> table;
        int longestdistinct=0;
        int winstart=0, winend=0;
        
        while(winend<s.size())
        {
            if(table.find(s[winend])==table.end())
            {
                //new char
                table.insert(s[winend]);
                longestdistinct = max(longestdistinct, winend-winstart+1);
                winend++;
            }
            else
            {
                //char exist
                table.erase(s[winstart]);
                winstart++;
            }
        }
        
        return longestdistinct;
    }
};

//heap array
private:
    void swap(vector<int> &heaparray, int posa, int posb)
    {
        if(posa!=posb)
        {
            int temp=heaparray[posa];
            heaparray[posa] = heaparray[posb];
            heaparray[posb] = temp;
        }
    }
private:
    //remove root from maxheap(root is max), resort to maxheap
    void maxheapify(vector<int> &heaparray)
    {
        if(heaparray.size())
        {
            int maxpos = heaparray.size();
            int localmax;
            int currpos=0, leftpos=1, rightpos=2;//max heapify from maximum root swap with minimum last node
            //cout<<"maxheapify currpos = "<<currpos<<", leftpos = "<<leftpos<<", rightpos = "<<rightpos<<endl;
            while(1)
            {
                //cout<<"maxheapify currpos = "<<currpos<<", leftpos = "<<leftpos<<", rightpos = "<<rightpos<<endl;
                localmax = currpos;
                if((rightpos<maxpos) && (heaparray[rightpos]>heaparray[localmax]))
                {
                    localmax = rightpos;
                }
                
                if ((leftpos<maxpos) && (heaparray[leftpos]>heaparray[localmax]))
                {
                    localmax = leftpos;
                }
                
                if(localmax!=currpos)
                {
                    swap(heaparray, currpos, localmax);
                    currpos = localmax;
                }
                else
                {
                    //root swap to proper positionm ,max binary heap done
                    break;
                }
                
                leftpos = (currpos<<1)+1;
                rightpos = (currpos<<1)+2;
            }
        }
    }
private:
    //swim add in maxheap(root is max)
    void swim(vector<int> &heaparray, int addnode)
    {
        int lastnodepos = heaparray.size();
        int parentnodepos = lastnodepos?((lastnodepos-1)/2):0;
        heaparray.push_back(addnode);

        if(lastnodepos!=parentnodepos)
        {
            while(heaparray[lastnodepos] >= heaparray[parentnodepos])
            {
                //cout<<"swim lastnodepos = "<<lastnodepos<<", parentnodepos = "<<parentnodepos<<endl;
                swap(heaparray, lastnodepos, parentnodepos);
                lastnodepos = parentnodepos;
                parentnodepos = (lastnodepos-1)/2;
                if(lastnodepos==0)
                {break;}
            }
        }
    }