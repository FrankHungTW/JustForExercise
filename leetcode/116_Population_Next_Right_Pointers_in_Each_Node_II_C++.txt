
//BFS, speed 73%, memory 10%
class Solution {
public:
    Node* connect(Node* root) {
        if(root)
        {
            vector<Node*> level;//record each level node
            vector<Node*> tree;//record whole tree node
            Node* prev;
            
            tree.push_back(root);
            while(tree.size())
            {
                level.assign(tree.begin(),tree.end());
                tree.clear();
                prev=NULL;
                for(const auto node:level)
                {
                    if(prev)
                    {prev->next=node;}
                    
                    //cout<<"current val="<<node->val<<endl;
                    if(node->left)
                    {
                        tree.push_back(node->left);
                    }
                    if(node->right)
                    {
                        tree.push_back(node->right);
                    }
                    prev=node;
                }
            }
        }
        return root;
    }
};

//DFS, pass basic cases
class Solution {
public:
    Node* connect(Node* root) {
        if((root) && (root->left || root->right))
        {
            Node* curr;
            if(root->left)
            {
                curr=root->left;
                if(root->right)
                {
                    curr=root->right;
                    root->left->next = root->right;
                }
            }
            else if(root->right)
            {
                curr = root->right;
            }
            
            if(curr && (root->next))
            {
                while(((!root->next->left) && (!root->next->right)) && root->next->next)
                {root->next = root->next->next;}
                //cross branch pointer
                if(root->next->left)
                {
                    curr->next = root->next->left;
                }
                else if(root->next->right)
                {
                    curr->next = root->next->right;
                }
            }
            connect(root->right);
            connect(root->left);
        }
        return root;
    }
};