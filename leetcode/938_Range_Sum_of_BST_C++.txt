
//brute force, speed 23%, memory 60%
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        int sum=0;
        if((root->val >=low) && (root->val <=high))
        {sum += root->val;}
        
        if(root->left)
        {sum += rangeSumBST(root->left,low,high);}
        
        if(root->right)
        {sum += rangeSumBST(root->right,low,high);}
        return sum;
    }
};

//check node value condition, speed 54%, memory 17%
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        int sum=0;
        if((root->val >=low) && (root->val <=high))
        {sum += root->val;}
        
        if((root->left) && (low < root->val))
        {sum += rangeSumBST(root->left,low,high);}
        
        if((root->right) && (high > root->val))
        {sum += rangeSumBST(root->right,low,high);}
        return sum;
    }
};


//
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        if(root == NULL)
        {
            return 0;
        }
        
        {
            int sum=0;
            if ((root->val >=low) && (root->val <=high))
            {sum += root->val;}

            if (low < root->val)
            {sum += rangeSumBST(root->left,low,high);}

            if (high > root->val)
            {sum += rangeSumBST(root->right,low,high);}
            return sum;
        }
    }
};