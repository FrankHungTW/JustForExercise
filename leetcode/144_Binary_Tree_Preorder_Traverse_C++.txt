/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> result;
        if(root==NULL)
        {
            return result;
        }
        else
        {
            stack<TreeNode*> s;
            /*TreeNode* cur=root;
             fail, infinite loop
            result.push_back(cur->val);
            while(!s.empty() || cur)
            {
                if(cur->left)
                {
                    s.push(cur);
                    cur=cur->left;
                    result.push_back(cur->val);
                }
                else if(cur->right)
                {
                    s.push(cur);
                    cur=cur->right;
                    result.push_back(cur->val);
                }
                else
                {
                    TreeNode* node=s.top();
                    cur = node;
                }
            }*/
            
            s.push(root);
            while(s.size()>0)
            {
                TreeNode* node=s.top();
                result.push_back(node->val);
                s.pop();
                if(node->right)
                {
                    s.push(node->right);
                }
                if(node->left)
                {
                    s.push(node->left);
                }
            }
        }
        return result;
    }
};
