
//speed 8%, memory 81%
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* result = new ListNode();
        ListNode* node = result;
        int carry=0, temp;
        
        while(l1!=NULL || l2!=NULL || carry)
        {
            ListNode *newNode = new ListNode();
            temp=0;
            if(l1)
            {
                temp+=l1->val;
                l1=l1->next;
            }
            if(l2)
            {
                temp+=l2->val;
                l2=l2->next;
            }
            temp+=carry;
            carry = temp/10;
            
            newNode->val = temp%10;
            node->next = newNode;
            node = node->next;
        }
        
        return result->next;
    }
};

//speed 45%, memory 50%
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* result = new ListNode();
        ListNode* node = result;
        int carry=0, temp;
        
        while(l1!=NULL || l2!=NULL || carry)
        {
            temp=0;
            if(l1)
            {
                temp+=l1->val;
                l1=l1->next;
            }
            if(l2)
            {
                temp+=l2->val;
                l2=l2->next;
            }
            temp+=carry;
            carry = temp/10;
            
            node->next = new ListNode(temp%10);
            node = node->next;
        }
        
        return result->next;
    }
};