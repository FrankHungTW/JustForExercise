
//slide window, speed 60%, memory 14%
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int minarraynum=nums.size()+1;
        int tempsum=0;
        int winstart=0, winend=0;
        
        for(winend=0; winend<nums.size(); winend++)
        {
            tempsum += nums[winend];
            
            while(tempsum>=target)
            {
                minarraynum = min(minarraynum,winend-winstart+1);
                
                //cout<< "temp sum is"<<tempsum<<", winstart="<<winstart<<", winend is "<<winend<<endl;
                //win_start++, don't move win_end in while
                tempsum = tempsum-nums[winstart];
                winstart++;
            }
        }
        return (minarraynum>nums.size())?0:minarraynum;
    }
};

//brute force, speed 5%, memory 59%
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int minarraynum=nums.size();
        int maxsum=0;
        int tempsize, tempsum;
        vector<int> minarray;
        vector<int> trvarray;
        
        for(int i=0; i<nums.size(); i++)
        {
            tempsum=0;
            tempsize=0;
            for(int j=i; j<nums.size(); j++)
            {
                tempsum+=nums[j];
                tempsize++;
                cout << "current i=" << i <<", j="<< j <<", tempsum=" <<tempsum << ", tempsize="<< tempsize <<endl;
                if(tempsum>=target)
                {
					minarraynum = min(minarraynum,tempsize);
                    maxsum = max(maxsum,tempsum);
                    break;
                }
            }
        }
        return (target>maxsum)?0:minarraynum;
    }
};