
//recursive DFS, speed 95%, memory 99%
class Solution {
public:
    int maxDepth(TreeNode* root) {
        
        if(root)
        {
            int leftdepth=1, rightdepth=1;
            if(root->left)
            {
                leftdepth += maxDepth(root->left);
            }
            if(root->right)
            {
                rightdepth += maxDepth(root->right);
            }
            return (leftdepth>rightdepth)?leftdepth:rightdepth;
        }
        else
        {return 0;}
    }
};
//iterative DFS, don't know how to decrease depth?
class Solution {
public:
    int maxDepth(TreeNode* root) {
        stack<TreeNode> node;
        TreeNode* cur;
        if(root)
        {
            int depth=0, temp_depth=0;
            node.push(root);
            while(node)
            {
                cur=node.top();
                node.pop();
                if((cur->left==NULL) && (cur->right==NULL))
                {
                    depth=temp_depth;
                }
                else
                {
                    temp_depth++;
                    if(cur->left)
                    {
                        node.push(cur->left);
                    }
                    if(root->right)
                    {
                        node.push(cur->right);
                    }
                }
            }
            return depth;
        }
        else
        {
            return 0;
        }
    }
};