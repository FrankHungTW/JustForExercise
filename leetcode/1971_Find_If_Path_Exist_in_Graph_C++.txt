//DFS, speed 33%, memory 6%
class Solution {
public:
    
    void DFS(unordered_map<int,vector<int>>&AdjList,int source, int destination, vector<bool>&visited,bool &ans){
        
        
        if(source == destination){
            ans = true;
            return;
        }
        visited[source] = true;
        for(auto u:AdjList[source]){
            if(visited[u] == false){
                DFS(AdjList,u,destination,visited,ans);
            }
        }
        
    }
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        if(source == destination){
            return true;
        }
        vector<bool>visited(n,false);
        unordered_map<int,vector<int>>AdjList;
        for(int i=0;i<edges.size();i++){
            int u=edges[i][0];
            int v = edges[i][1];
            AdjList[u].push_back(v);
            AdjList[v].push_back(u);
        }
        bool ans = false;
        DFS(AdjList,source,destination,visited,ans);
        return ans;
    }
};












//BFS, time limit Exceed
class Solution {

public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        //int edgeTo[n];
        int marked[n];//record node has ever traversed
        queue<int> q;
        for(int i=0; i<n; i++)
        {
            marked[i]=0;
        }
        marked[source]=true;
        
        q.push(source);
        
        while(q.size())
        {
            int v=q.front();
            q.pop();
            
            for(const auto &id:edges)
            {
                cout<<"traverse edges between "<<id[0]<<" and "<<id[1]<<endl;
                if((id[0]==v) && (!marked[id[1]]))
                {
                    //traverse from src id[0] to id[1], mark id[1], record edgeTo[id[1]]=id[0]
                    cout<<"1.source="<<source<<", edges between "<<id[0]<<" and "<<id[1]<<endl;
                    marked[id[1]]=true;
                    //edgeTo[id[1]]=id[0];
                    q.push(id[1]);
                }
                else if((id[1]==v) && (!marked[id[0]]))
                {
                    //traverse from src id[1] to id[0], mark id[0], record edgeTo[id[0]]=id[1]
                    cout<<"2.source="<<source<<", edges between "<<id[0]<<" and "<<id[1]<<endl;
                    marked[id[0]]=true;
                    //edgeTo[id[0]]=id[1];
                    q.push(id[0]);
                }
            }
        }
        
        return (marked[destination]?true:false);
    }
};

//DFS, Time limit Exceed
class Solution {
private:
    bool dfs(vector<vector<int>>& edges, int src, int dest, int *marked, int *edgeTo)
    {
        if(src==dest)
        {
            return true;
        }
        else
        {
            for(const auto &id:edges)
            {
                cout<<"traverse edges between "<<id[0]<<" and "<<id[1]<<endl;
                if((id[0]==src) && (!marked[id[1]]))
                {
                    //traverse from src id[0] to id[1], mark id[1], record edgeTo[id[1]]=id[0]
                    cout<<"1.src="<<src<<", edges between "<<id[0]<<" and "<<id[1]<<endl;
                    marked[id[1]]=true;
                    edgeTo[id[1]]=id[0];
                    if(dfs(edges, id[1], dest, marked, edgeTo))
                    {
                        return true;
                    }
                }
                else if((id[1]==src) && (!marked[id[0]]))
                {
                    //traverse from src id[1] to id[0], mark id[0], record edgeTo[id[0]]=id[1]
                    cout<<"2.src="<<src<<", edges between "<<id[0]<<" and "<<id[1]<<endl;
                    marked[id[0]]=true;
                    if(dfs(edges, id[0], dest, marked, edgeTo))
                    {
                        return true;
                    }
                }
            }
            return false;
        }
    }
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        int edgeTo[n];
        int marked[n];//record node has ever traversed
        for(int i=0; i<n; i++)
        {marked[i]=0;}
        marked[source]=true;
        return dfs(edges, source, destination, marked, edgeTo);
    }
};